{
  "name": "pulsar-ide-typescript",
  "main": "./lib/main",
  "version": "0.1.4",
  "description": "A Pulsar-native IDE provider package for TypeScript and JavaScript",
  "keywords": [],
  "repository": "https://github.com/savetheclocktower/pulsar-ide-typescript",
  "license": "MIT",
  "engines": {
    "atom": ">=1.0.0 <2.0.0"
  },
  "activationCommands": {
    "atom-workspace": [
      "pulsar-ide-typescript:start-language-server"
    ]
  },
  "activationHooks": [
    "source.js:root-scope-used",
    "source.ts:root-scope-used",
    "source.tsx:root-scope-used"
  ],
  "enhancedScopes": [
    "source.js",
    "source.ts",
    "source.tsx"
  ],
  "dependencies": {
    "@savetheclocktower/atom-languageclient": "^1.17.11",
    "typescript": "^5.1.6",
    "typescript-language-server": "^4.3.3"
  },
  "configSchema": {
    "nodeBin": {
      "title": "Path to Node",
      "default": "node",
      "type": "string",
      "description": "Usually the default will detect the correct version of Node for your path. Specify this value if you encounter errors. Check the README for more information.",
      "order": 0
    },
    "includeJavaScript": {
      "order": 1,
      "title": "Include JavaScript",
      "type": "boolean",
      "default": false,
      "description": "Whether to use this language server's features for JavaScript files. This package will attempt to set sensible defaults for JavaScript projects, but you can customize the experience further with a [`jsconfig.json` file](https://code.visualstudio.com/docs/languages/jsconfig) at your project root."
    },
    "linter": {
      "type": "object",
      "order": 2,
      "title": "Linter",
      "properties": {
        "enable": {
          "title": "Enable",
          "type": "boolean",
          "default": true,
          "description": "Whether to show diagnostic messages via the `linter` package. (To change this setting for a specific kind of file, use a scoped setting.)"
        },
        "ignoredCodes": {
          "title": "Ignored Codes",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "A comma-separated list of diagnostic codes that should be ignored by the linter."
        },
        "ignoredCodesWhenBufferIsModified": {
          "title": "Ignored Codes (while buffer is modified)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "A comma-separated list of diagnostic codes that should be ignored by the linter **until you save the buffer**. (This can suppress linter messages that interrupt you to remind you to do things that you were about to do anyway.)"
        },
        "includeMessageCodeInMessageBody": {
          "title": "Include Message Code in Message Body",
          "type": "boolean",
          "default": false,
          "description": "When enabled, will include the code for a linter message at the end of its body."
        }
      }
    },
    "symbols": {
      "order": 3,
      "type": "object",
      "title": "Symbols",
      "properties": {
        "enable": {
          "title": "Enable",
          "type": "boolean",
          "default": true,
          "description": "Whether to provide symbols for the current file, for project-wide symbol search, and for going to the definition of a symbol. (To change this setting for a specific kind of file, use a scoped setting.)"
        },
        "enableForFileSymbols": {
          "title": "Enable For File Symbols",
          "type": "boolean",
          "default": true,
          "description": "Whether to act as a provider for file symbols. Has no effect unless **Enable** is also checked."
        },
        "enableForProjectSymbols": {
          "title": "Enable For Project Symbols",
          "type": "boolean",
          "default": true,
          "description": "Whether to act as a provider for project symbols. Affects the `symbols-view` commands **Toggle Project Symbols** and **Go To Declaration**. Has no effect unless **Enable** is also checked."
        },
        "ignoredTags": {
          "title": "Ignored Tags",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "A comma-separated list of tags that should be ignored when generating symbols."
        },
        "minimumQueryLength": {
          "title": "Minimum Query Length",
          "default": 3,
          "type": "number",
          "description": "The minimum number of characters a user must type on a **project-wide symbol search** before the request is forwarded to the language server."
        }
      }
    },
    "autocomplete": {
      "order": 4,
      "type": "object",
      "title": "Autocomplete",
      "collapsed": false,
      "properties": {
        "enable": {
          "title": "Enable",
          "type": "boolean",
          "default": true,
          "description": "Whether to suggest contextual completions with `autocomplete-plus`. (Takes effect after a window reload or a restart of Pulsar.)"
        }
      }
    },
    "codeFormat": {
      "order": 5,
      "type": "object",
      "title": "Code Formatting",
      "collapsed": false,
      "properties": {
        "enable": {
          "order": 0,
          "title": "Enable",
          "type": "boolean",
          "default": false,
          "description": "Whether to enable automatic code formatting. When disabled, this package will not act as a code formatting provider under any circumstances. When enabled, you must still have a package such as `atom-ide-code-format` to implement code formatting and to control whether it is applied on save, while you type, or only when you ask for it.\n\n**Before enabling**, please ensure that this behavior will not interfere with any other format-on-save behavior might be active in your project from integrations with (e.g.) ESLint or Prettier.\n\n(Takes effect after a window reload or a restart of Pulsar.)"
        },
        "formattingRules": {
          "order": 1,
          "title": "Formatting Rules",
          "type": "object",
          "collapsed": false,
          "description": "This section controls the specific style rules that will be applied when code formatting is invoked over a range or an entire file.\n\nThese settings correspond to identical settings in the [typescript-language-server configuration](https://github.com/typescript-language-server/typescript-language-server/blob/0a034dae6c777733f4c2f6d5b151c5ef781fb662/docs/configuration.md#workspacedidchangeconfiguration).\n\nIf any of these style settings should differ between TypeScript and JavaScript, you may specify scope-specific overrides in your `config.cson`.",
          "properties": {
            "semicolons": {
              "title": "Semicolons",
              "type": "string",
              "enum": [
                "ignore",
                "insert",
                "remove"
              ],
              "default": "ignore",
              "description": "Whether to enforce presence of absence of semicolons.",
              "order": 0
            },
            "insertSpaceAfterCommaDelimiter": {
              "title": "Insert space after comma delimiter",
              "description": "Enabled: `[1, 2, 3]` Disabled: `[1,2,3]`",
              "type": "boolean",
              "default": true
            },
            "insertSpaceAfterConstructor": {
              "title": "Insert space after constructor",
              "description": "Enabled: `constructor () {` Disabled: `constructor() {`",
              "type": "boolean",
              "default": false
            },
            "insertSpaceAfterSemicolonInForStatements": {
              "title": "Insert space after semicolon in “for” statements",
              "description": "Enabled: `for (let i = 0; i < x.length; i++)` Disabled: `for (let i = 0;i < x.length;i++)`",
              "type": "boolean",
              "default": true
            },
            "insertSpaceBeforeAndAfterBinaryOperators": {
              "title": "Insert space before and after binary operators",
              "description": "Enabled: `let x = 0` Disabled: `let x=0`",
              "type": "boolean",
              "default": true
            },
            "insertSpaceAfterKeywordsInControlFlowStatements": {
              "title": "Insert space after keywords in control flow statements",
              "description": "Enabled: `if (foo) {` Disabled: `if(foo) {`",
              "type": "boolean",
              "default": true
            },
            "insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
              "title": "Insert space after “function” keyword for anonymous functions",
              "description": "Enabled: `function () {` Disabled: `function() {`",
              "type": "boolean",
              "default": true
            },
            "insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
              "title": "Insert space after opening and before closing non-empty parentheses",
              "description": "Enabled: `if ( foo )` Disabled: `if (foo)`",
              "type": "boolean",
              "default": false
            },
            "insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": {
              "title": "Insert space after opening and before closing non-empty braces",
              "description": "Enabled: `return { x, y }` Disabled: `return {x, y}`",
              "type": "boolean",
              "default": true
            },
            "insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": {
              "title": "Insert space after opening and before closing non-empty brackets",
              "description": "Enabled: `[1, 2, 3]` Disabled: `[ 1, 2, 3 ]`",
              "type": "boolean",
              "default": false
            },
            "insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": {
              "title": "Insert space after opening and before closing empty braces",
              "description": "Enabled: `return { }` Disabled: `return {}`",
              "type": "boolean",
              "default": false
            },
            "insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
              "title": "Insert space after opening and before closing JSX expression braces",
              "description": "Enabled: `<x>{ foo }</x>` Disabled: `<x>{foo}</x>`",
              "type": "boolean",
              "default": false
            },
            "insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
              "title": "Insert space after opening and before closing template string braces",
              "description": "Enabled: `foo ${ bar }` Disabled: `foo ${bar}`",
              "type": "boolean",
              "default": false
            },
            "insertSpaceBeforeFunctionParenthesis": {
              "title": "Insert space before function parenthesis",
              "description": "Enabled: `function foo () {` Disabled: `function foo() {`",
              "type": "boolean",
              "default": false
            },
            "insertSpaceAfterTypeAssertion": {
              "title": "Insert space after type assertion",
              "description": "Enabled: `: asserts x is Foo` Disabled: `:asserts X is foo`",
              "type": "boolean",
              "default": true
            },
            "insertSpaceBeforeTypeAnnotation": {
              "title": "Insert space before type annotation",
              "description": "Enabled: `type Foo : unknown` Disabled: `type Foo: unknown`",
              "type": "boolean",
              "default": true
            },
            "placeOpenBraceOnNewLineForControlBlocks": {
              "title": "Place open brace on new line for control blocks",
              "type": "boolean",
              "default": false
            },
            "placeOpenBraceOnNewLineForFunctions": {
              "title": "Place open brace on new line for functions",
              "type": "boolean",
              "default": false
            }
          }
        }
      }
    },
    "advanced": {
      "order": 6,
      "collapsed": true,
      "type": "object",
      "title": "Advanced",
      "properties": {
        "additionalScopes": {
          "title": "Additional Scopes",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "A comma-separated list of additional language scopes for which the language server's features should be used. (The language server will not start automatically when you open one of these files; you may have to start the language server manually via the **Pulsar Ide Typescript Alpha: Start Language Server** command.)"
        }
      }
    }
  },
  "consumedServices": {
    "linter-indie": {
      "versions": {
        "2.0.0": "consumeLinterV2"
      }
    },
    "datatip": {
      "versions": {
        "0.1.0": "consumeDatatip"
      }
    },
    "signature-help": {
      "versions": {
        "0.1.0": "consumeSignatureHelp"
      }
    },
    "atom-ide-busy-signal": {
      "versions": {
        "0.1.0": "consumeBusySignal"
      }
    }
  },
  "providedServices": {
    "intentions:list": {
      "versions": {
        "1.0.0": "provideIntentionsList"
      }
    },
    "symbol.provider": {
      "description": "Allows external sources to suggest symbols for a given file or project.",
      "versions": {
        "1.0.0": "provideSymbols"
      }
    },
    "autocomplete.provider": {
      "versions": {
        "4.0.0": "provideAutocomplete"
      }
    },
    "code-actions": {
      "versions": {
        "0.1.0": "provideCodeActions"
      }
    },
    "code-format.range": {
      "versions": {
        "0.1.0": "provideRangeCodeFormat"
      }
    },
    "code-format.onType": {
      "versions": {
        "0.1.0": "provideOnTypeCodeFormat"
      }
    },
    "code-format.onSave": {
      "versions": {
        "0.1.0": "provideOnSaveCodeFormat"
      }
    },
    "call-hierarchy": {
      "versions": {
        "0.1.0": "provideCallHierarchy"
      }
    },
    "code-highlight": {
      "versions": {
        "0.1.0": "provideCodeHighlight"
      }
    },
    "definitions": {
      "versions": {
        "0.1.0": "provideDefinitions"
      }
    },
    "find-references": {
      "versions": {
        "0.1.0": "provideFindReferences"
      }
    },
    "outline-view": {
      "versions": {
        "0.1.0": "provideOutlines"
      }
    },
    "refactor": {
      "versions": {
        "0.1.0": "provideRefactor",
        "0.2.0": "provideRefactorWithPrepare"
      }
    }
  },
  "devDependencies": {
    "eslint": "^8.45.0"
  }
}
